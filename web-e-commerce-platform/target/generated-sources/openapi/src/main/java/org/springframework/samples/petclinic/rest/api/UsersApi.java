/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.springframework.samples.petclinic.rest.api;

import org.springframework.samples.petclinic.rest.dto.ErrorDto;
import org.springframework.samples.petclinic.rest.dto.ItemDto;
import org.springframework.samples.petclinic.rest.dto.ItemFieldsDto;
import org.springframework.samples.petclinic.rest.dto.ProductDto;
import org.springframework.samples.petclinic.rest.dto.ProductFieldsDto;
import org.springframework.samples.petclinic.rest.dto.UserDto;
import org.springframework.samples.petclinic.rest.dto.UserFieldsDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-07T02:29:36.569825600+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users/{userId}/items : Adds a item to a user
     * Records the details of a new item.
     *
     * @param userId The ID of the user. (required)
     * @param itemFieldsDto The details of the new item. (required)
     * @return The item was sucessfully added. (status code 201)
     *         or Bad request. (status code 400)
     *         or User not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addItemToUser",
        summary = "Adds a item to a user",
        description = "Records the details of a new item.",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The item was sucessfully added.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/items",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ItemDto> addItemToUser(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "ItemFieldsDto", description = "The details of the new item.", required = true) @Valid @RequestBody ItemFieldsDto itemFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/{userId}/products : Adds a product to a owner
     * Records the details of a new product.
     *
     * @param userId The ID of the owner. (required)
     * @param productFieldsDto The details of the new product. (required)
     * @return The product was sucessfully added. (status code 201)
     *         or Bad request. (status code 400)
     *         or User not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addProductToOwner",
        summary = "Adds a product to a owner",
        description = "Records the details of a new product.",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The product was sucessfully added.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductDto> addProductToOwner(
        @Parameter(name = "userId", description = "The ID of the owner.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "ProductFieldsDto", description = "The details of the new product.", required = true) @Valid @RequestBody ProductFieldsDto productFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/{userId}/{productId} : Adds a product to a user
     *
     * @param userId The ID of the user. (required)
     * @param productId The ID of the product. (required)
     * @return The item was sucessfully added. (status code 201)
     *         or Bad request. (status code 400)
     *         or User not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addProductToUser",
        summary = "Adds a product to a user",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The item was sucessfully added.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ItemDto> addProductToUser(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "productId", description = "The ID of the product.", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : Create a user
     * Creates a user.
     *
     * @param userFieldsDto The user (required)
     * @return User created successfully. (status code 201)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or User not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addUser",
        summary = "Create a user",
        description = "Creates a user.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDto> addUser(
        @Parameter(name = "UserFieldsDto", description = "The user", required = true) @Valid @RequestBody UserFieldsDto userFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId}/items/{itemId}/addone
     *
     * @param userId The ID of the user. (required)
     * @param itemId The ID of the item. (required)
     * @return Item details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or User not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addUsersItemById",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Item details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}/items/{itemId}/addone",
        produces = { "application/json" }
    )
    default ResponseEntity<ItemDto> addUsersItemById(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "itemId", description = "The ID of the item.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") Long itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId}/charge : charge for the user
     *
     * @param userId The id of the user to retrieve (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "chargeUserByUid",
        summary = "charge for the user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}/charge",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDto> chargeUserByUid(
        @Parameter(name = "userId", description = "The id of the user to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId}/products/{productId} : Delete a product by ID in a Owner
     * Returns the product or a 404 error.
     *
     * @param userId The ID of the user. (required)
     * @param productId The ID of the product. (required)
     * @return Item details found and returned. (status code 200)
     *         or Delete Ok (status code 204)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Owner not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteOwnersProduct",
        summary = "Delete a product by ID in a Owner",
        description = "Returns the product or a 404 error.",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Item details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "204", description = "Delete Ok"),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Owner not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}/products/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductDto> deleteOwnersProduct(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "productId", description = "The ID of the product.", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId} : Delete a user by ID
     * Returns the user or a 404 error.
     *
     * @param userId The ID of the user. (required)
     * @return User details found and returned. (status code 200)
     *         or Delete Ok (status code 204)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or User not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete a user by ID",
        description = "Returns the user or a 404 error.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "204", description = "Delete Ok"),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDto> deleteUser(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId}/items/{itemId} : Delete an item by ID in a User
     * Returns the item or a 404 error.
     *
     * @param userId The ID of the user. (required)
     * @param itemId The ID of the item. (required)
     * @return Item details found and returned. (status code 200)
     *         or Delete Ok (status code 204)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or User not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteUsersItem",
        summary = "Delete an item by ID in a User",
        description = "Returns the item or a 404 error.",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Item details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            }),
            @ApiResponse(responseCode = "204", description = "Delete Ok"),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}/items/{itemId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ItemDto> deleteUsersItem(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "itemId", description = "The ID of the item.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") Long itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId}/products/{productId} : Get a product by ID
     * Returns the product or a 404 error.
     *
     * @param userId The ID of the user. (required)
     * @param productId The ID of the product. (required)
     * @return Item details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Item not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "getOwnersProduct",
        summary = "Get a product by ID",
        description = "Returns the product or a 404 error.",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Item details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/products/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductDto> getOwnersProduct(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "productId", description = "The ID of the product.", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId}/items/{itemId} : Get a item by ID
     * Returns the item or a 404 error.
     *
     * @param userId The ID of the user. (required)
     * @param itemId The ID of the item. (required)
     * @return Item details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Item not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "getUsersItem",
        summary = "Get a item by ID",
        description = "Returns the item or a 404 error.",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Item details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/items/{itemId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ItemDto> getUsersItem(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "itemId", description = "The ID of the item.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") Long itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId}/products : List all products of a owner
     *
     * @param userId The ID of the owner. (required)
     * @return A paged array of products (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "listOwnersProducts",
        summary = "List all products of a owner",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of products", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProductDto>> listOwnersProducts(
        @Parameter(name = "userId", description = "The ID of the owner.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : List all users
     *
     * @return A paged array of users (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "listUsers",
        summary = "List all users",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of users", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserDto>> listUsers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId}/items : List all items of a user
     *
     * @param userId The ID of the user. (required)
     * @return A paged array of items (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "listUsersItems",
        summary = "List all items of a user",
        tags = { "items" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of items", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ItemDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/items",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ItemDto>> listUsersItems(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/login : Login a user
     * Login a user.
     *
     * @param userDto The user (required)
     * @return Expected response to a valid request (status code 200)
     *         or Uid cannot be empty (status code 400)
     *         or Invalid uid or password (status code 401)
     *         or Invalid username (status code 404)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Login a user",
        description = "Login a user.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Uid cannot be empty", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid uid or password", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Invalid username", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDto> loginUser(
        @Parameter(name = "UserDto", description = "The user", required = true) @Valid @RequestBody UserDto userDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId} : Info for a specific user
     *
     * @param userId The id of the user to retrieve (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "showUserByUid",
        summary = "Info for a specific user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDto> showUserByUid(
        @Parameter(name = "userId", description = "The id of the user to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId}/items/{itemId}/subone
     *
     * @param userId The ID of the user. (required)
     * @param itemId The ID of the item. (required)
     * @return Item details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or User not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "subUsersItemById",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Item details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}/items/{itemId}/subone",
        produces = { "application/json" }
    )
    default ResponseEntity<ItemDto> subUsersItemById(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "itemId", description = "The ID of the item.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") Long itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId}/products/{productId} : Update a product&#39;s details
     * Updates the product record with the specified details.
     *
     * @param userId The ID of the user. (required)
     * @param productId The ID of the product. (required)
     * @param productFieldsDto The product details to use for the update. (required)
     * @return Product details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Item not found for this user. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateOwnersProduct",
        summary = "Update a product's details",
        description = "Updates the product record with the specified details.",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found for this user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}/products/{productId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductDto> updateOwnersProduct(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "productId", description = "The ID of the product.", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId,
        @Parameter(name = "ProductFieldsDto", description = "The product details to use for the update.", required = true) @Valid @RequestBody ProductFieldsDto productFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId} : Update a user&#39;s details
     * Updates the user record with the specified details.
     *
     * @param userId The ID of the user. (required)
     * @param userFieldsDto The user details to use for the update. (required)
     * @return User details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or User not found. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update a user's details",
        description = "Updates the user record with the specified details.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDto> updateUser(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "UserFieldsDto", description = "The user details to use for the update.", required = true) @Valid @RequestBody UserFieldsDto userFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId}/items/{itemId} : Update a item&#39;s details
     * Updates the item record with the specified details.
     *
     * @param userId The ID of the user. (required)
     * @param itemId The ID of the item. (required)
     * @param itemFieldsDto The item details to use for the update. (required)
     * @return Item details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Item not found for this user. (status code 404)
     *         or Server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateUsersItem",
        summary = "Update a item's details",
        description = "Updates the item record with the specified details.",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Item details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found for this user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}/items/{itemId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ItemDto> updateUsersItem(
        @Parameter(name = "userId", description = "The ID of the user.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "itemId", description = "The ID of the item.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") Long itemId,
        @Parameter(name = "ItemFieldsDto", description = "The item details to use for the update.", required = true) @Valid @RequestBody ItemFieldsDto itemFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
